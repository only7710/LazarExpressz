#!/usr/bin/env python3
"""
Test script a cache rendszer tesztel√©s√©re
"""

import requests
import json
import time
from datetime import datetime

BASE_URL = "http://localhost:5000/api"

def print_header(title):
    print(f"\n{'='*50}")
    print(f"  {title}")
    print(f"{'='*50}")

def test_cache_endpoints():
    """Teszteli a cache endpoint-okat"""
    
    print_header("CACHE RENDSZER TESZT")
    
    try:
        # 1. Cache info lek√©r√©se
        print("\n1. Cache inform√°ci√≥k lek√©r√©se...")
        response = requests.get(f"{BASE_URL}/cache/info")
        if response.status_code == 200:
            cache_info = response.json()
            print("‚úÖ Cache info sikeres")
            print(json.dumps(cache_info, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå Cache info hiba: {response.status_code}")
            
        # 2. Vonatok lek√©r√©se (cache-el)
        print("\n2. Vonatok lek√©r√©se (els≈ë h√≠v√°s - cache felt√∂lt√©s)...")
        start_time = time.time()
        response = requests.get(f"{BASE_URL}/trains")
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Vonatok lek√©r√©se sikeres ({end_time - start_time:.3f}s)")
            print(f"   Vonatok sz√°ma: {data.get('count', 0)}")
            print(f"   Cache-b≈ël: {data.get('from_cache', False)}")
            print(f"   Utols√≥ friss√≠t√©s: {data.get('last_updated', 'N/A')}")
        else:
            print(f"‚ùå Vonatok lek√©r√©se hiba: {response.status_code}")
            
        # 3. Vonatok √∫jra lek√©r√©se (cache-b≈ël)
        print("\n3. Vonatok √∫jra lek√©r√©se (cache-b≈ël)...")
        start_time = time.time()
        response = requests.get(f"{BASE_URL}/trains")
        end_time = time.time()
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Vonatok √∫jra lek√©r√©se sikeres ({end_time - start_time:.3f}s)")
            print(f"   Cache-b≈ël: {data.get('from_cache', False)}")
            print(f"   Utols√≥ friss√≠t√©s: {data.get('last_updated', 'N/A')}")
        else:
            print(f"‚ùå Vonatok √∫jra lek√©r√©se hiba: {response.status_code}")
            
        # 4. Rendszer √°llapot
        print("\n4. Rendszer √°llapot lek√©r√©se...")
        response = requests.get(f"{BASE_URL}/status")
        if response.status_code == 200:
            status = response.json()
            print("‚úÖ Rendszer √°llapot sikeres")
            print(f"   √ñsszes vonat: {status.get('status', {}).get('total_trains', 0)}")
            print(f"   Utols√≥ friss√≠t√©s: {status.get('last_updated', 'N/A')}")
        else:
            print(f"‚ùå Rendszer √°llapot hiba: {response.status_code}")
            
        # 5. Keres√©s teszt
        print("\n5. Keres√©s teszt...")
        response = requests.get(f"{BASE_URL}/search?q=Budapest")
        if response.status_code == 200:
            search_data = response.json()
            print(f"‚úÖ Keres√©s sikeres")
            print(f"   Tal√°latok: {search_data.get('count', 0)}")
            print(f"   Utols√≥ friss√≠t√©s: {search_data.get('last_updated', 'N/A')}")
        else:
            print(f"‚ùå Keres√©s hiba: {response.status_code}")
            
        # 6. Cache friss√≠t√©s teszt
        print("\n6. Manu√°lis cache friss√≠t√©s...")
        response = requests.post(f"{BASE_URL}/cache/refresh")
        if response.status_code == 200:
            print("‚úÖ Cache friss√≠t√©s sikeres")
            refresh_data = response.json()
            print(f"   √úzenet: {refresh_data.get('message', 'N/A')}")
        else:
            print(f"‚ùå Cache friss√≠t√©s hiba: {response.status_code}")
            
        # 7. Cache info √∫jra
        print("\n7. Cache inform√°ci√≥k √∫jra...")
        response = requests.get(f"{BASE_URL}/cache/info")
        if response.status_code == 200:
            cache_info = response.json()
            print("‚úÖ Cache info sikeres")
            for cache_type, info in cache_info.get('cache_info', {}).items():
                exists = "‚úÖ" if info.get('exists') else "‚ùå"
                size = info.get('file_size', 0)
                last_update = info.get('last_updated', 'N/A')
                print(f"   {cache_type}: {exists} ({size} bytes) - {last_update}")
        else:
            print(f"‚ùå Cache info hiba: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Nem siker√ºlt csatlakozni a backend-hez!")
        print("   Ellen≈ërizd, hogy fut-e a Flask alkalmaz√°s a http://localhost:5000 c√≠men")
    except Exception as e:
        print(f"‚ùå Hiba t√∂rt√©nt: {e}")

def test_performance():
    """Teljes√≠tm√©ny teszt cache-el √©s n√©lk√ºle"""
    
    print_header("TELJES√çTM√âNY TESZT")
    
    try:
        # Cache t√∂rl√©se
        print("Cache t√∂rl√©se...")
        requests.post(f"{BASE_URL}/cache/clear")
        
        # Els≈ë h√≠v√°s (cache n√©lk√ºl)
        print("\n1. Els≈ë h√≠v√°s (cache felt√∂lt√©s)...")
        times = []
        for i in range(3):
            start_time = time.time()
            response = requests.get(f"{BASE_URL}/trains")
            end_time = time.time()
            duration = end_time - start_time
            times.append(duration)
            
            if response.status_code == 200:
                data = response.json()
                cache_status = "cache-b≈ël" if data.get('from_cache') else "frissen"
                print(f"   H√≠v√°s {i+1}: {duration:.3f}s ({cache_status})")
            
            time.sleep(1)  # V√°runk egy kicsit
            
        avg_time = sum(times) / len(times)
        print(f"\n   √Åtlagos id≈ë: {avg_time:.3f}s")
        
    except Exception as e:
        print(f"‚ùå Teljes√≠tm√©ny teszt hiba: {e}")

if __name__ == "__main__":
    print("üöÇ Magyar Vonatk√∂vet≈ë - Cache Teszt")
    print(f"Teszt ideje: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    test_cache_endpoints()
    test_performance()
    
    print(f"\n{'='*50}")
    print("  TESZT BEFEJEZVE")
    print(f"{'='*50}")